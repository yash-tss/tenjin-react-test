// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9DLyskYk67REQMnTM53pan
// Component: BK1v8G4xw2wg
import * as React from "react";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 9DLyskYk67REQMnTM53pan/projectcss
import sty from "./PlasmicNavBar.module.css"; // plasmic-import: BK1v8G4xw2wg/css
import Frame7Icon from "./icons/PlasmicIcon__Frame7"; // plasmic-import: yLdiNZEtYMhA/icon

createPlasmicElementProxy;

export const PlasmicNavBar__VariantProps = new Array();

export const PlasmicNavBar__ArgProps = new Array();

const $$ = {};

function PlasmicNavBar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame12"}
        data-plasmic-override={overrides.frame12}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame12)}
      >
        <Stack__
          as={Frame7Icon}
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          hasGap={true}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"frame11"}
          data-plasmic-override={overrides.frame11}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame11)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rgQh
            )}
          >
            {"Home"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ksaLl
            )}
          >
            {"Services"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nbylP
            )}
          >
            {"Pricing"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eqhGm
            )}
          >
            {"Team"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5Wtno
            )}
          >
            {"Contact Us"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ia5Sq
            )}
          >
            {"Blog"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame32"}
          data-plasmic-override={overrides.frame32}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame32)}
        >
          <div
            data-plasmic-name={"frame21"}
            data-plasmic-override={overrides.frame21}
            className={classNames(projectcss.all, sty.frame21)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nDxy2
              )}
            >
              {"Download Now"}
            </div>
          </div>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame12", "svg", "frame11", "frame32", "frame21"],
  frame12: ["frame12", "svg", "frame11", "frame32", "frame21"],
  svg: ["svg"],
  frame11: ["frame11"],
  frame32: ["frame32", "frame21"],
  frame21: ["frame21"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavBar__ArgProps,
          internalVariantPropNames: PlasmicNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavBar";
  } else {
    func.displayName = `PlasmicNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar = Object.assign(
  // Top-level PlasmicNavBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame12: makeNodeComponent("frame12"),
    svg: makeNodeComponent("svg"),
    frame11: makeNodeComponent("frame11"),
    frame32: makeNodeComponent("frame32"),
    frame21: makeNodeComponent("frame21"),
    // Metadata about props expected for PlasmicNavBar
    internalVariantProps: PlasmicNavBar__VariantProps,
    internalArgProps: PlasmicNavBar__ArgProps
  }
);

export default PlasmicNavBar;
/* prettier-ignore-end */
