// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9DLyskYk67REQMnTM53pan
// Component: 0n7Sno43fc3P
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Tilt from "@plasmicpkgs/react-parallax-tilt";
import { useScreenVariants as useScreenVariantsaFh7XZwKhsDa } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: aFh7xZwKhsDA/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 9DLyskYk67REQMnTM53pan/projectcss
import sty from "./PlasmicHeroComponent.module.css"; // plasmic-import: 0n7Sno43fc3P/css
import tenjinHomeScreenpngMUzlPaZEdjiu from "./images/tenjinHomeScreenpng.png"; // plasmic-import: mUzlPaZEdjiu/picture

createPlasmicElementProxy;

export const PlasmicHeroComponent__VariantProps = new Array();

export const PlasmicHeroComponent__ArgProps = new Array("buttonLabel");

const $$ = {};

function PlasmicHeroComponent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          buttonLabel: "Button"
        },
        props.args
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsaFh7XZwKhsDa()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"heroLeft"}
          data-plasmic-override={overrides.heroLeft}
          hasGap={true}
          className={classNames(projectcss.all, sty.heroLeft)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            hasGap={true}
            className={classNames(projectcss.all, sty.text)}
          >
            <Tilt
              data-plasmic-name={"tilt"}
              data-plasmic-override={overrides.tilt}
              className={classNames("__wab_instance", sty.tilt)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"headingOverline"}
                data-plasmic-override={overrides.headingOverline}
                hasGap={true}
                className={classNames(projectcss.all, sty.headingOverline)}
              >
                <div
                  data-plasmic-name={"overline"}
                  data-plasmic-override={overrides.overline}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.overline
                  )}
                >
                  {"become a legendary invester"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xxxv
                  )}
                >
                  {"Invest like a hedge fund,\npowered by TenjinAI."}
                </div>
              </Stack__>
            </Tilt>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___3Edo5
              )}
            >
              {
                "Discover actionable insights and stay ahead of market trends with our Systematic Investment Research."
              }
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"actions"}
            data-plasmic-override={overrides.actions}
            hasGap={true}
            className={classNames(projectcss.all, sty.actions)}
          >
            <div
              data-plasmic-name={"downloadButton"}
              data-plasmic-override={overrides.downloadButton}
              className={classNames(projectcss.all, sty.downloadButton)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___6Rut2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.buttonLabel;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Download Now";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame14"}
            data-plasmic-override={overrides.frame14}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame14)}
          >
            <div
              data-plasmic-name={"frame1"}
              data-plasmic-override={overrides.frame1}
              className={classNames(projectcss.all, sty.frame1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__kkIC
                )}
              >
                {"$25M+"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nn4Nh
                )}
              >
                {"in AUM/AUA"}
              </div>
            </div>
            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kYxoh
                  )}
                >
                  {"50+ Years"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gnHof
                  )}
                >
                  {"Of Wall St. Experience"}
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(projectcss.all, sty.frame5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mpjRc
                  )}
                >
                  {"SEC Registered"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p8C1G
                  )}
                >
                  {"Financial Advisor"}
                </div>
              </div>
            </div>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"heroRight"}
          data-plasmic-override={overrides.heroRight}
          className={classNames(projectcss.all, sty.heroRight)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"450px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"auto"}
            loading={"lazy"}
            src={{
              src: tenjinHomeScreenpngMUzlPaZEdjiu,
              fullWidth: 1290,
              fullHeight: 2796,
              aspectRatio: undefined
            }}
          />
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "heroLeft",
    "text",
    "tilt",
    "headingOverline",
    "overline",
    "actions",
    "downloadButton",
    "frame14",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "heroRight",
    "img"
  ],

  freeBox: [
    "freeBox",
    "heroLeft",
    "text",
    "tilt",
    "headingOverline",
    "overline",
    "actions",
    "downloadButton",
    "frame14",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5",
    "heroRight",
    "img"
  ],

  heroLeft: [
    "heroLeft",
    "text",
    "tilt",
    "headingOverline",
    "overline",
    "actions",
    "downloadButton",
    "frame14",
    "frame1",
    "frame2",
    "frame3",
    "frame4",
    "frame5"
  ],

  text: ["text", "tilt", "headingOverline", "overline"],
  tilt: ["tilt", "headingOverline", "overline"],
  headingOverline: ["headingOverline", "overline"],
  overline: ["overline"],
  actions: ["actions", "downloadButton"],
  downloadButton: ["downloadButton"],
  frame14: ["frame14", "frame1", "frame2", "frame3", "frame4", "frame5"],
  frame1: ["frame1"],
  frame2: ["frame2", "frame3"],
  frame3: ["frame3"],
  frame4: ["frame4", "frame5"],
  frame5: ["frame5"],
  heroRight: ["heroRight", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroComponent__ArgProps,
          internalVariantPropNames: PlasmicHeroComponent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroComponent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroComponent";
  } else {
    func.displayName = `PlasmicHeroComponent.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroComponent = Object.assign(
  // Top-level PlasmicHeroComponent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    heroLeft: makeNodeComponent("heroLeft"),
    text: makeNodeComponent("text"),
    tilt: makeNodeComponent("tilt"),
    headingOverline: makeNodeComponent("headingOverline"),
    overline: makeNodeComponent("overline"),
    actions: makeNodeComponent("actions"),
    downloadButton: makeNodeComponent("downloadButton"),
    frame14: makeNodeComponent("frame14"),
    frame1: makeNodeComponent("frame1"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    heroRight: makeNodeComponent("heroRight"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeroComponent
    internalVariantProps: PlasmicHeroComponent__VariantProps,
    internalArgProps: PlasmicHeroComponent__ArgProps
  }
);

export default PlasmicHeroComponent;
/* prettier-ignore-end */
